var searchIndex = {};
searchIndex['solvent'] = {"items":[[0,"","solvent","Solvent is a dependency resolver library written in rust.",null,null],[3,"DepGraph","","This is the dependency graph.",null,null],[12,"dependencies","","List of dependencies.  Key is the element, values are the\nother elements that the key element depends upon.",0,null],[12,"satisfied","","Nodes already satisfied.  dependencies_of() will prune\ndependency searches at these nodes, and not output nodes\nregistered here.",0,null],[3,"DepGraphIterator","","This iterates through the dependencies of the DepGraph's target",null,null],[4,"SolventError","","",null,null],[13,"CycleDetected","","",1,null],[11,"clone","","",0,{"inputs":[{"name":"depgraph"}],"output":{"name":"depgraph"}}],[11,"eq","","",1,{"inputs":[{"name":"solventerror"},{"name":"solventerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"solventerror"},{"name":"solventerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"solventerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"solventerror"}],"output":{"name":"solventerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"solventerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"solventerror"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"solventerror"}],"output":{"name":"option"}}],[11,"new","","Create an empty DepGraph.",0,{"inputs":[{"name":"depgraph"}],"output":{"name":"depgraph"}}],[11,"register_dependency","","Add a dependency to a DepGraph.  The node does not need\nto pre-exist, nor do the dependency nodes.  But if the\nnode does pre-exist, the depends_on will be added to its\nexisting dependency list.",0,{"inputs":[{"name":"depgraph"},{"name":"str"},{"name":"str"}],"output":null}],[11,"register_dependencies","","Add multiple dependencies of one node to a DepGraph.  The\nnode does not need to pre-exist, nor do the dependency elements.\nBut if the node does pre-exist, the depends_on will be added\nto its existing dependency list.",0,null],[11,"mark_as_satisfied","","This marks a node as satisfied.  Iterators will not output\nsuch nodes.",0,null],[11,"dependencies_of","","Get an iterator to iterate through the dependencies of\nthe target node.",0,{"inputs":[{"name":"depgraph"},{"name":"str"}],"output":{"name":"depgraphiterator"}}],[6,"Item","","",null,null],[11,"next","","Get next dependency.  Returns None when finished.  If\nSome(Err(SolventError)) occurs, all subsequent calls will\nreturn None.",2,{"inputs":[{"name":"depgraphiterator"}],"output":{"name":"option"}}]],"paths":[[3,"DepGraph"],[4,"SolventError"],[3,"DepGraphIterator"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[12,"module_path","","The module path of the message.",0,null],[12,"file","","The source file containing the message.",0,null],[12,"line","","The line containing the message.",0,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",1,null],[13,"Warn","","The \"warn\" level.",1,null],[13,"Info","","The \"info\" level.",1,null],[13,"Debug","","The \"debug\" level.",1,null],[13,"Trace","","The \"trace\" level.",1,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",2,null],[13,"Error","","Corresponds to the `Error` log level.",2,null],[13,"Warn","","Corresponds to the `Warn` log level.",2,null],[13,"Info","","Corresponds to the `Trace` log level.",2,null],[13,"Debug","","Corresponds to the `Debug` log level.",2,null],[13,"Trace","","Corresponds to the `Trace` log level.",2,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"enabled","","Determines if the current logger will ignore a log message at the specified\nlevel from the specified module.",null,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"bool"}}],[5,"log","","Logs a message.",null,{"inputs":[{"name":"loglevel"},{"name":"loglocation"},{"name":"arguments"}],"output":null}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message sent at the specified level from the\nspecified module would be logged.",3,{"inputs":[{"name":"log"},{"name":"loglevel"},{"name":"str"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",3,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",1,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",1,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",1,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",2,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",2,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"new","","Creates a new `LogRecord`.",4,{"inputs":[{"name":"logrecord"},{"name":"loglevel"},{"name":"loglocation"},{"name":"arguments"}],"output":{"name":"logrecord"}}],[11,"args","","The message body.",4,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"location","","The location of the log directive.",4,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",5,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",5,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[3,"LogLocation"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};
initSearch(searchIndex);
